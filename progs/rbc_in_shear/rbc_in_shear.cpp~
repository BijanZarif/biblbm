/*
 * deformation_test.cpp
 *
 *  Created on: Jun 2, 2015
 *      Author: niber
 */
#define FSI_PROFILE

#include "palabos3D.h"
#include "palabos3D.hh"
#include "fsi/headers.h"
#include "fsi/headers.hh"
#include "../common/calibrate_rbc_shape.h"
#include "../common/shear_flow_setup.h"

using namespace plb;
using namespace fsi;

#define DESCRIPTOR descriptors::ForcedPhaseD3Q19Descriptor
typedef Periodicity3D<double, true, false, true> Periodicity;

int main(int argc, char ** argv)
{
	// Initialize palabos
	plbInit(&argc, &argv);

	// Setup input/output 
	global::IOpolicy().activateParallelIO(true);
	global::directories().setOutputDir("test_vox/");
	global::directories().setInputDir(global::directories().getOutputDir());
	io::mkdir(global::directories().getOutputDir().c_str());

	// Domain dimensions
	plint geoNx = 32, geoNy = 32, geoNz = 32;
	Array<double, 3> channel_mid(0.5*geoNx, 0.5*geoNy, 0.5*geoNz);

	// Number of iterations
	plint Nt = 10000;

	// Number iterations between flow and particle output
	plint output_interval = 10;

	// Input parameters
	double tau = 1; 			// LBM relaxation parameter
	double Re_p = 0.1;			// Particle Reynolds number
	double lambda = 5;			// Viscosity ratio between the fluid inside and outside the rbcs
	double Ca = 0.01;			// Capillary number (mu*(rbc radius)*gamma / (rbc shear modulus)
	double k_bend_rel = 0.006;	// Relative bending energy
	double poisson_ratio = 0.990;// Poisson ratio (controls the area stiffness, set to ~1 for area incompressibility)

	// Load mesh
	ParticleShapeLibrary<double> shape_library;
	shape_library.read_and_store_mesh("sphere_TRImesh_626n_1248el.msh", "RBC");
	ParticleShape<double> * shape = shape_library.get_by_tag("RBC");
	double a_lb = shape->get_radius();

	// Flow properties
	/*double gamma_si = 400;

	// Membrane properties
	double G = 5.5e-6;
	double K = 100 * 1.e-3;
	double K_bend = 5e-18;*/

	// Deduce parameters
	double nu_lb = (tau - 0.5) / 3.0;
	double gamma_lb = Re_p *nu_lb / (a_lb*a_lb);
	double uMax = gamma_lb * geoNx / 2.0;

	// Relaxation frequencies
	double tau_inner = 0.5 + lambda*(tau - 0.5);
	double omega = 1. / tau;
	double omega_inner = 1. / tau_inner;

	// Membrane parameters
	RBCParameters<double> rbc_params;
	double G_lb = a_lb * gamma_lb * nu_lb / Ca;

	// In plane properties
	// Get average link length
	double lavg = 0;
	for(ParticleShape<double>::link_const_iterator it = shape->links_begin(); it != shape->links_end(); ++it)
		lavg += it->length;
	lavg /= shape->count_links();

	rbc_params.p = 1;								// Persistance length
	rbc_params.L0 = lavg;							// Spectrin link equlibrium length
	rbc_params.vol_desired = shape->get_volume();	// Desired RBC volume
	rbc_params.Lmax = 2.2*rbc_params.L0;			// Maximum spectrin link length
	// The shear modulus is proportional to k_in_plane, set to one first and 
	// adjust the value so that the desired shear modulus is obtained
	rbc_params.k_in_plane = 1;						
	rbc_params.k_in_plane = G_lb / rbc_params.G();
	// Compute the WLC link area constraint parameter
	rbc_params.compute_C();

	// Bending stiffness
	rbc_params.k_bend = k_bend_rel * G_lb * shape->get_area();

	// Equilibrium angle
	rbc_params.theta0 = std::acos((std::sqrt(3)*(shape->count_vertices() - 2) - 5*M_PI) / (std::sqrt(3)*(shape->count_vertices() - 2) - 3*M_PI) );
	//rbc_params.theta0 = 0;

	// Area and volume constraint.
	// Set the area constraint to obtain the desired poisson ratio
	// (poisson_ratio = K_links + K_area_local + K_area_global)
	double K_area = (poisson_ratio + 1)/(1 - poisson_ratio) * G_lb;
	double delta_K_area = K_area - rbc_params.K();

	rbc_params.k_area_global = delta_K_area * 0.9;
	rbc_params.k_area_local = delta_K_area * 0.1;
	rbc_params.k_volume = 0.5*delta_K_area;

	RBCParticle<double> rbc(shape_library.get_by_tag("RBC"), rbc_params);

	pcout << "RBC Parameters:" << std::endl;
	pcout << "  Global area stiffness: " << rbc_params.k_area_global << std::endl;
	pcout << "  Local area stiffness: " << rbc_params.k_area_local << std::endl;
	pcout << "  Global volume stiffness: " << rbc_params.k_volume << std::endl;
	pcout << "  Bending stiffness: " << rbc_params.k_bend << std::endl;
	pcout << "  In-plane shear stiffness: " << rbc_params.k_in_plane << std::endl;
	pcout << "  Equilibrium angle: " << rbc_params.theta0 << std::endl;
	pcout << "  Shear modulus: " << rbc_params.G() << std::endl;
	pcout << "  Area modulus " << rbc_params.K() << std::endl;
	pcout << "  Young's modulus: " << rbc_params.youngs_modulus() << std::endl;
	pcout << "  Area dilation energy " << rbc_params.C << std::endl;
	pcout << "==============" << std::endl;
	pcout << "Non-dimensional parameters:" << std::endl;
	pcout << "  Re_p: " << gamma_lb * util::sqr(shape->get_radius()) / nu_lb << std::endl;
	pcout << "  Ca_G: " << gamma_lb * shape->get_radius() * nu_lb / rbc_params.G() << std::endl;
	pcout << "  lambda: " << lambda << std::endl;
	pcout << "  Relative bending stiffness (kb/GA): " << rbc_params.k_bend / (rbc_params.G() * rbc.area()) << std::endl;
	pcout << "  Poisson ratio " << rbc_params.poisson_ratio() << std::endl;
	pcout << "==============" << std::endl;
	pcout << "Numerics:" << std::endl;
	pcout << "  uMax:" << uMax << std::endl;
	pcout << "  tau (outer fluid):" << tau << std::endl;
	pcout << "  tau (inner fluid):" << tau_inner << std::endl;
	pcout << "==============" << std::endl;

	// Create equilbrium shape
	shrink_rbc_volume(rbc, (double) 0.59*rbc.shape()->get_volume(), 10000);

	// Move RBC to channel mid and rotate it so that its minor axis is parallel to the y-axis
	rbc.set_center_of_mass(Array<double, 3>(channel_mid[0]*0.9, channel_mid[1]*1.05, channel_mid[2]));
	rbc.set_minor_axis_orientation(Array<double, 3>(1, 0, 0));

	// Create lattice
	MultiBlockLattice3D<double, DESCRIPTOR> lattice(
			geoNx+1, geoNy+1, geoNz+1,
			new GuoExternalForceVOFDynamics<double, DESCRIPTOR>(omega, omega_inner) );
	lattice.periodicity().toggle(0, true);
	lattice.periodicity().toggle(1, true);
	lattice.periodicity().toggle(2, true);
	Box3D domain = lattice.getBoundingBox();
	lattice.toggleInternalStatistics(false);

	OnLatticeBoundaryCondition3D<double,DESCRIPTOR> * boundaryCondition
			= createInterpBoundaryCondition3D<double,DESCRIPTOR>();
	shearFlowSetup(lattice, uMax, *boundaryCondition);

	// Immersed boundary module
	ImmersedBoundaryDynamics3D<double, DESCRIPTOR, Periodicity> fsi(
			lattice,
			shape_library );

	// Velocity and concentration fields
	std::auto_ptr<MultiTensorField3D<double, 3> > velocity = generateMultiTensorField<double, 3>(domain);
	std::auto_ptr<MultiScalarField3D<double> > H = generateMultiScalarField<double>(domain);

	// Add rbc
	fsi.add_particle(&rbc);

	// Initialize fsi
	fsi.init();

	pcout << "===============" << std::endl;
	pcout << "Starting coupled ib-lbm iterations" << std::endl;
	for(plint it = 0; it <= Nt; ++it) {
		if((it % 1000) == 0) {
			pcout << "Iteration " << it << " / " << Nt << std::endl;
		}

		computeVelocity(lattice, *velocity, domain);
		setExternalVector(lattice, domain, DESCRIPTOR<double>::ExternalField::forceBeginsAt, Array<double, 3>(0,0,0));
		applyProcessingFunctional(wrap_ibm_dynamics3D(fsi), domain, lattice, *velocity);

		if((it % output_interval) == 0) {
			fsi.write_particles_as_vtk(it);

			// Get concentration field
			applyProcessingFunctional(new ComputeConcentrationFunctional<double, DESCRIPTOR>, domain, lattice, *H);

			VtkImageOutput3D<double> vtkOut(createFileName("vtk", it, 6), 1.);
			vtkOut.writeData<3,float>(*velocity, "velocity", 1.);
			vtkOut.writeData<float>(*H, "concentration", 1.);
		}

		// Compute forces and update node positions
		Profile::start_timer("lbm");
		lattice.collideAndStream();
		Profile::stop_timer("lbm");
	}

	Profile::write_report("profile");

	parallelIO::save(lattice, "checkpoint_lbm", false);
	fsi.save_checkpoint("checkpoint_fsi");
}

